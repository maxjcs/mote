<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.longcity.modeler.dao.TaskDao" >
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from task
    where id = #{id}
  </delete>
  <insert id="insert" parameterType="Task"  useGeneratedKeys="true" keyProperty="id">
    insert into task (user_id, title, 
      url, price, shot_fee, 
      img_url, self_buy_off, shot_desc, 
      gender, shape, height_min, 
      height_max,age_min,age_max, areaId, modeler_level, 
      self_buy_rate, number, shot_area_id, 
      status,create_time,update_time,total_fee)
    values (#{userId}, #{title}, 
      #{url}, #{price}, #{shotFee}, 
      #{imgUrl}, #{selfBuyOff}, #{shotDesc}, 
      #{gender}, #{shape}, #{heightMin}, 
      #{heightMax},#{ageMin},#{ageMax}, #{areaid}, #{modelerLevel}, 
      #{selfBuyRate}, #{number}, #{shotAreaId}, 
      #{status},now(),now(),#{totalFee})
  </insert>
  <update id="updateByPrimaryKey" parameterType="Task" >
    update task
    set user_id = #{userId},
      title = #{title},
      url = #{url},
      price = #{price},
      shot_fee = #{shotFee},
      img_url = #{imgUrl},
      self_buy_off = #{selfBuyOff},
      shot_desc = #{shotDesc},
      gender = #{gender},
      shape = #{shape},
      height_min = #{heightMin},
      height_max = #{heightMax},
      age_min = #{ageMin},
      age_max = #{ageMax},
      areaId = #{areaid},
      modeler_level = #{modelerLevel},
      self_buy_rate = #{selfBuyRate},
      number = #{number},
      shot_area_id = #{shotAreaId},
      status = #{status},
      total_fee = #{totalFee}
    where id = #{id}
  </update>
  
  <update id="updateStatus" >
    update task
    set  status = #{param2}
    where id = #{param1}
  </update>
  
  <select id="selectByPrimaryKey" resultType="Task" parameterType="java.lang.Integer" >
    select *
    from task
    where id = #{id}
  </select>
  
  <select id="getNewTaskList" resultType="Task" parameterType="map" >
    select id, user_id, title, url, price, shot_fee, img_url, self_buy_off, shot_desc, 
    gender, shape, height_min, height_max, areaId, modeler_level, self_buy_rate, number, 
    shot_area_id, status,total_fee,create_time,update_time
    from task
    where user_id = #{userId} and status in (0,1,3)
    order by id desc
    limit #{start},#{pageSize}
  </select>
  
  <select id="countNewTaskList" resultType="int" parameterType="map" >
    select ifnull(count(1),0)
    from task
    where user_id = #{userId} and status in (0,1,3)
  </select>
  
  <select id="getStasticTaskList" resultType="Task" parameterType="map" >
    select id, user_id, title, url, price, shot_fee, img_url, self_buy_off, shot_desc, 
    gender, shape, height_min, height_max, areaId, modeler_level, self_buy_rate, number, 
    shot_area_id, status,total_fee
    from task
    where user_id = #{userId} and status = #{status}
    order by id desc
    limit #{start},#{pageSize}
  </select>
  
  <select id="countStasticTaskList" resultType="int" parameterType="map" >
    select ifnull(count(1),0)
    from task
    where user_id = #{userId} and status = #{status}
  </select>
  
 <select id="countTaskByUserId" resultType="int" parameterType="QuerySellerDetailParamVO" >
    select ifnull(count(1),0)
    from task
    where user_id = #{sellerId}
  </select>
  
  <select id="queryTaskByUserId" resultType="Task" parameterType="QuerySellerDetailParamVO" >
    select id, user_id, title, url, price, shot_fee, img_url, self_buy_off, shot_desc, 
    gender, shape, height_min, height_max, areaId, modeler_level, self_buy_rate, number, 
    shot_area_id, status,total_fee,create_time,update_time
    from task
    where user_id = #{sellerId} 
    order by id desc
    limit #{start},#{pageSize}
  </select>
  
  <select id="getTaskNumBySellerId" resultType="int"  >
    select ifnull(count(1),0)
    from task
    where user_id = #{param1} and status in (2,4)
  </select>
  
  <select id="queryTaskList" parameterType="QueryTaskParamVO"  resultType="Task" >
    select u.nickname,t.*
    from task t,user u
    where 1=1 and t.user_id = u.id 
    <include refid="queryWhere"/>
    order by id desc
    limit #{start},#{pageSize}
  </select>

  <select id="countTaskList" parameterType="QueryTaskParamVO" resultType="int"  >
    select ifnull(count(1),0)
     from task t,user u
    where 1=1 and t.user_id = u.id
    <include refid="queryWhere"/>
  </select>
  
   <sql id="queryWhere">
        <if test="registerBegin!=null and registerBegin!=''">
            AND t.create_time&gt;=#{registerBegin}
        </if>
        <if test="registerEnd!=null and registerEnd!=''">
            AND t.create_time&lt;=#{registerEnd}
        </if>
        <if test="title!=null and title!=''">
            AND t.title LIKE CONCAT('%',#{title},'%')
        </if>
        <if test="status!=null and status!=-1">
            AND t.status = ${status}
        </if>
   </sql>  
   
  <select id="countMoteTaskByTaskId" parameterType="QueryTaskDetailParamVO" resultType="int"  >
    select ifnull(count(1),0)
     from mote_task mt,user u
    where mt.user_id = u.id and mt.user_id=#{taskId}
  </select>
  
    <select id="queryMoteTaskByTaskId" parameterType="QueryTaskDetailParamVO" resultType="MoteTaskVO"  >
    select mt.id,u.nickname,mt.order_no,mt.status,mt.finish_status
     from mote_task mt,user u
    where mt.user_id = u.id and mt.user_id=#{taskId}
  </select>
   
     
  
  
  
  
  
  
  
  
  
  
</mapper>