<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xuexibao.teacher.dao.TaskDao">
	<select id="getTaskList" resultType="RecordedVO">
		      select a.question_id,ifnull(q.latex,q.content) latex,q.learn_phase,a.id,a.allot_time,a.status,ifnull(s.name,'未知') as subject_text,a.allot_time create_time,a.org_id 
		      from question_allot a 
		      join question q on a.question_id = q.real_id 
		      left join subject s on q.real_subject = s.real_subject 
		      where a.allot_user = #{teacherId}
		      <if test='planType=="A"'>
             			and a.org_id=#{orgId}
        		</if>
		      order by a.allot_time desc 
	</select>
	
	<select id="countTask" resultType="int">
		<![CDATA[
		      select count(1) 
		      from question_allot a 
		      where a.allot_user = #{value}
		]]>
	</select>
	
	<select id="listAllotQuestionId" resultType="Long">
		<![CDATA[
		      select question_id 
		      from question_allot a 
		      where a.allot_user = #{value}
		]]>
	</select>
	
	<select id="listAllotQuest" resultType="QuestionAllot">
		<![CDATA[
		      select question_id,allot_user,allot_time,status,org_id
		      from question_allot a 
		      where a.allot_user = #{value}
		]]>
	</select>
	
	<select id="countTaskAudioOfTeacher" resultType="int">
		      select count(*)
		      from audio_upload a 
		      where a.source=1 and a.teacher_id = #{param1}
		      <if test="param2!=null">
                	and a.create_time>#{param2}
            </if>
	</select>
	
	<update id="deleteOldTaskLsit" >
		delete from question_allot where allot_user = #{value}
	</update>
	
	<update id="releaseQuestionAllotStatus">
		update question a
		set a.allot_status=0,a.update_time=now()
		where a.real_id in 
			 <foreach item="item" index="index" collection="list" open="(" separator="," close=")">  
			  #{item}  
			 </foreach>
	</update>
	
	<update id="lockQuestionAllotStatus">
		update question a
		set a.allot_status=1,a.update_time=now()
		where a.real_id in 
			 <foreach item="item" index="index" collection="list" open="(" separator="," close=")">  
			  #{item}  
			 </foreach>
	</update>
	
	<update id="updateOrgQuestAllot">
		update org_quest a
		set a.status=#{status},a.update_time=now()
		where org_id=#{orgId} and a.real_quest_id in 
			 <foreach item="item" index="index" collection="questids" open="(" separator="," close=")">  
			  #{item}  
			 </foreach>
	</update>
	
	<update id="deleteByTeacherIdQuestionId" parameterType="map">
		delete from question_allot where allot_user = #{teacherId} and question_id=#{questionId}
	</update>
	
	<update id="addNewTaskList" parameterType="list">
		insert into question_allot(question_id,allot_user,allot_time,status,org_id)
		values
		<foreach collection="list" item="item" index="index"
			separator=",">
			(#{item.questionId},#{item.allotUser},now(),1,#{item.orgId})
    	</foreach>
	</update>
	
	<select id="getTaskListWithFeud"   resultType="QuestionAllot" parameterType="map">
		select a.real_id question_id
		from question a
		where audio_upload_status=-1 and source in ('1','2') and allot_status=0 
                	and real_subject = #{realSubject}
               
        limit #{limit}
	</select>
	
	<select id="fetchNewTaskList" parameterType="map" resultType="QuestionAllot">
		select a.real_id question_id,#{teacherId} allot_user 
		from question a
		where audio_upload_status=-1 and source in ('1','2') and allot_status=0 and real_id&gt;#{maxQuestId}
                	and real_subject in
                	 <foreach item="item" index="index" collection="subjectIdList" open="(" separator="," close=")">  
					  #{item}  
					 </foreach> 
                	and learn_phase in
                	<foreach item="item" index="index" collection="gradeList" open="(" separator="," close=")">  
					  #{item}  
					</foreach> 
        limit #{limit}
	</select>
	
	<select id="fetchOrgNewTaskList" parameterType="map" resultType="QuestionAllot">
		select real_quest_id question_id,#{teacherId} allot_user,#{orgId} org_id
		from org_quest a
		where status=0 and org_id=#{orgId} 
					and not exists (select 1 from audio_upload where teacher_id=#{teacherId} and question_id=a.real_quest_id)
				 	and subject_id in
                	 <foreach item="item" index="index" collection="subjectIdList" open="(" separator="," close=")">  
					  #{item}  
					 </foreach> 
                	and learn_phase in
                	<foreach item="item" index="index" collection="gradeList" open="(" separator="," close=")">  
					  #{item}  
					</foreach>
        limit #{limit}
	</select>
	
	<select id="getTaskSummary" resultType="map" parameterType="String">
			select count(1) docount from audio_upload where teacher_id=#{value} and create_time>curdate() and source='1'
	</select>
	
	<select id="countCompleteTask" resultType="int" parameterType="String">
			select count(1)  from audio_upload where teacher_id=#{value} and create_time>curdate() and source='1'
	</select>
</mapper> 