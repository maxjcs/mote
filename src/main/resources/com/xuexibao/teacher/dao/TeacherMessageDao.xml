<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xuexibao.teacher.dao.TeacherMessageDao">
	<insert id="addTeacherMessage" parameterType="TeacherMessage" keyProperty="id" useGeneratedKeys="true">
		insert into
		teacher_message (
			student_Id,
			teacher_id,
			content,
			type,
			reply_id,
			floor,
			reply_floor,
			create_time,
			update_time
		)
		values(
					#{studentId},
					#{teacherId},
					#{content},
					#{type},
					#{replyId},
					#{floor},
					#{replyFloor},
					now(),
					#{updateTime}
		)
	</insert>
	
	<select id="getTeacherMessage" resultType="TeacherMessage" parameterType="hashmap">
  	select 	
  		l.id, 		
	  	l.student_id, 	
	  	l.teacher_id , 		
	  	l.content,
	  	l.type,
	  	l.create_time,		
	  	l.update_time  
  	from teacher_message l
  	where l.teacher_id = #{teacherId} and l.status=1
  	order by create_time desc 
  	limit #{pageSize} offset #{offset}
  </select>
  
   <select id="listMesageByIds" resultType="TeacherMessage" >
         select * from teacher_message 
         where id in 
			<foreach item="item" index="index" collection="list" open="(" separator="," close=")">  
			  #{item}  
			</foreach> and status=1 
    </select>
	
	<select id="countMessageByTeacherId" resultType="int">
  	select 	
  		ifnull(count(1),0)
  	from teacher_message l
  	where l.teacher_id = #{teacherId} and  l.status=1
  	</select>
  	
    <select id="getMessageNumByTeacherId" resultType="int">
  	select 	
  		ifnull(count(1),0)
  	from teacher_message l
  	where l.teacher_id = #{teacherId} and  l.status=1
  	</select>
  	
  	<select id="getMessageById" resultType="TeacherMessage">
  		select * from teacher_message where id = #{id}
  	</select>
  	
  	<select id="getLastMessageByTeacherId" resultType="TeacherMessage">
  		select * from teacher_message where teacher_id=#{value} order by create_time desc limit 1
  	</select>
  	
  	 <select id="getHotMessageIdByTeacherId" resultType="Long">
  		select a.id from teacher_message a, (
	  		select reply_id ,count(*) count
			from teacher_message 
			where reply_id is not null and reply_id>0 and status=1 and teacher_id=#{value}
			group by reply_id
		) b where a.id=b.reply_id and a.status=1
		order by b.count desc
		limit 1
  	</select>
  	
  	<select id="nextPageTeacherMessage" resultType="TeacherMessage">
  		select * from (
  			select * from teacher_message 
  			where teacher_id=#{teacherId} and status=1  and id&lt;#{firstIdOfLastPage} 
  			order by create_time desc 
  			limit #{limit}
  		)a 
  		order by id 
  	</select>
  	
  	<select id="removeTeacherMessage" >
  		update teacher_message set status=0 where id = #{value}
  	</select>
  	 
	<select id="summaryTeacherMessage" resultType="map">
		select sum(countReplyer) countReplyer,sum(countMessage) countMessage from (
			select count(distinct(student_id)) countReplyer,count(*) countMessage from teacher_message where teacher_id=#{value} and status=1 and type=1
			union all
			select count(distinct(teacher_id)) countReplyer,count(*) countMessage from teacher_message where teacher_id=#{value} and status=1 and type=2
		) a 
  	</select>
  	
  	<select id="summaryReplyMessage" resultType="map">
  		select sum(countReplyer) countReplyer,sum(countMessage) countMessage from (
			select count(distinct(student_id)) countReplyer,count(*) countMessage  from teacher_message where teacher_id=#{teacherId} and reply_id=#{replyId} and status=1 and type=1
  			union all 
  			select count(distinct(teacher_id)) countReplyer,count(*) countMessage  from teacher_message where teacher_id=#{teacherId} and reply_id=#{replyId} and status=1 and type=2
  		)  a
  	</select>
  	
  	<select id="nextPageReplyMessage" resultType="TeacherMessage">
  		select * from (
  			select * from teacher_message 
  			where status=1  and teacher_id=#{teacherId}  and reply_id=#{replyId} and id&lt;#{firstIdOfLastPage} 
  			order by create_time desc 
  			limit #{limit}
  		)a 
  		order by id
  	</select>
</mapper> 