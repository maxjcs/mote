<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xuexibao.teacher.dao.ExplanationDao" >
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    update explanation set deal_status=2
    where id = #{id}
  </delete>
  <insert id="insert" parameterType="Explanation" useGeneratedKeys="true" keyProperty="id">
    insert into explanation (img_id, question_real_id1, question_real_id2,question_real_id3,audio_create_time,live_img_create_time,
      create_time, update_time, teacher_id,status, audio_whiteboard_id,deal_status)
    values (#{imgId}, #{questionRealId1}, #{questionRealId2},#{questionRealId3},#{audioCreateTime},#{liveImgCreateTime},
      now(), now(), #{teacherId}, #{status}, #{audioWhiteboardId},#{dealStatus})
  </insert>
  <update id="updateByPrimaryKey" parameterType="Explanation" >
    update explanation
    set img_id = #{imgId},
      question_real_id1 = #{questionRealId1},
      question_real_id2 = #{questionRealId2},
      question_real_id3 = #{questionRealId3},
      audio_create_time = #{audioCreateTime},
      live_img_create_time= #{liveImgCreateTime},
      update_time = now(),
      teacher_id = #{teacherId},
      status = #{status},
      audio_whiteboard_id = #{audioWhiteboardId},
      deal_status = #{dealStatus}
    where id = #{id}
  </update>
  <select id="selectByPrimaryKey" resultType="Explanation" parameterType="java.lang.Long" >
    select id, img_id, question_real_id1,question_real_id2,question_real_id3,audio_create_time, live_img_create_time,create_time, update_time, teacher_id,status, audio_whiteboard_id,deal_status
    from explanation
    where id = #{id}
  </select>
  
  <select id="queryByImgId" resultType="Explanation" parameterType="java.lang.String" >
    select id, img_id, question_real_id1,question_real_id2,question_real_id3,audio_create_time, live_img_create_time,create_time, update_time, teacher_id,status, audio_whiteboard_id,deal_status
    from explanation
    where img_id = #{imgId} limit 1
  </select>
  
  
  
  <select id="queryByAudioId" resultType="Explanation" parameterType="java.lang.String" >
    select id, img_id, question_real_id1,question_real_id2,question_real_id3,audio_create_time,live_img_create_time, create_time, update_time, teacher_id, status, audio_whiteboard_id,deal_status
    from explanation where audio_whiteboard_id = #{audioId}
  </select>
  
  <select id="getUnRecordedList" resultType="Explanation" parameterType="hashmap" >
    select id, img_id, question_real_id1,question_real_id2,question_real_id3,audio_create_time, live_img_create_time,create_time, update_time, teacher_id,status, audio_whiteboard_id,deal_status
    from explanation 
    where teacher_id = #{teacherId} and status=1 and deal_status =1 
    <if test="liveImgCreateTime!=null">  
           and live_img_create_time &lt; #{liveImgCreateTime}
    </if>
    order by live_img_create_time desc
    limit #{pageSize}
  </select>
  
  <select id="getRecordedList" resultType="Explanation" parameterType="hashmap" >
    select e.id, e.img_id, e.question_real_id1,e.question_real_id2,e.question_real_id3, e.audio_create_time,e.live_img_create_time,e.create_time,e.update_time, e.teacher_id,e.status, e.audio_whiteboard_id,t.plan_type
	from explanation e inner join teacher t on (t.id=e.teacher_id)
	left join organization_sources o on ( o.teacher_id=#{teacherId} and o.plan_type='A')
	where ( (t.cur_org_id=o.id and t.plan_type='A') or ( t.id=#{teacherId}) )   
    and e.status=2 and e.deal_status =1 
     <if test="audioCreateTime!=null">  
           and e.audio_create_time &lt; #{audioCreateTime}
    </if>
    order by e.audio_create_time desc
    limit #{pageSize}
  </select>
  
  <select id="getRecordedCount" resultType="int" parameterType="string" >
    select count(1)
    from explanation e inner join teacher t on (t.id=e.teacher_id)
	left join organization_sources o on ( o.teacher_id=#{teacherId} and o.plan_type='A')
	where ( (t.cur_org_id=o.id and t.plan_type='A') or ( t.id=#{teacherId}) )   
    and e.status=2 and e.deal_status =1
  </select>
  
  <select id="getLiveaaImg" resultType="LiveaaImage" parameterType="java.util.HashMap" >
    SELECT id,image_id,res_search,image_url,image_url_domain,create_time,update_time,search_type,ver_client 
    FROM liveaa_education.liveaa_image 
    where flag=1 and ver_client=1 and user_id=#{deviceId} 
    <if test="liveaacreateTime!=null">  
           and create_time>#{liveaacreateTime}
    </if>
    order by create_time desc
    limit #{pageSize}
  </select>
  
  <select id="getLiveaaImgByImgId" resultType="LiveaaImage" parameterType="string" >
    SELECT id,image_id,res_search,image_url,image_url_domain,create_time,update_time,search_type,ver_client 
    FROM liveaa_education.liveaa_image 
    where image_id=#{imgId}
  </select>
  
   <select id="getLastRecord" resultType="Explanation" parameterType="java.lang.String" >
    select id, img_id, question_real_id1,question_real_id2,question_real_id3, audio_create_time,live_img_create_time,create_time, update_time, teacher_id, status, audio_whiteboard_id
    from explanation where teacher_id = #{teacherId} 
    order by live_img_create_time desc
    limit 1
  </select>
  
  
  
  
  
  
  
  
  
</mapper>
